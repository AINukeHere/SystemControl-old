## 플레이어들을 위한 용어정리
## 폴더 , 노드
## 엣지 -> 연결선

0. 
안녕하십니까 SystemControl튜토리얼에 오신것을 환영합니다. 이 게임은 여러 게임들로 구성되어있습니다. 각 게임은 이미 프로그래밍되어있는 것 같지만 당신이 재프로그래밍해서 플레이할 수 있습니다.
당신만의 시스템설계로 게임을 풀어가보시기 바랍니다.
<Space를 눌러 계속>

1. 
지금은 가장 기초가 되는 Avoider라는 게임을 이용해 진행합니다. 왼쪽의 네모모양 캐릭터를 이동시켜서 오른쪽의 빨간색 지역에 들어가도록 하면 되는 간단한 게임입니다.
하지만 지금은 무슨 키를 눌러도 캐릭터가 움직이지 않습니다.
아래에 있는 흰색 바를 드래그로 올려보세요.
<흰색 바를 올려 계속>

2. 
잘하셨습니다 여기서 게임시스템을 재프로그래밍을 할 수 있습니다. 노드화면과 게임화면은 흰색 바를 잡고 움직이거나 간단하게 Tab으로 조절가능합니다.
<Space를 눌러 계속>

3.
구석에 있는 폴더를 잘보이도록 화면을 옮겨봅시다. 빈공간에다 좌클릭으로 드래그를 하면 화면이 이동합니다.
<폴더를 화면 중앙에 가깝게 오도록 화면을 이동해서 계속>

4. 
또한 마우스 휠을 이용해 화면 확대 및 축소가 가능합니다.
<마우스 휠을 올리거나 내려서 계속>

5. 
보이는 폴더는 노드들을 모아둔 집합입니다.
특정한 시스템을 구성하는 노드를 프로그래머가 다른 노드와 혼동하지 않게 한데 묶어놓은 것이죠.
<Space를 눌러 계속>

6. 
오른쪽 아래에 도구UI를 클릭후 폴더를 클릭하면 폴더가 해체되며 구성노드를 볼 수 있습니다.
폴더를 해체해보세요
<폴더를 해체해 계속>

7. 
노드시스템은 <color=magenta>노드</color>와 <color=orange>연결선</color>으로 구성됩니다. 
<Space를 눌러 계속>

8.
모든 노드는 <color=magenta>입력</color>이나 <color=orange>출력</color>을 가질 수 있습니다.
입력은 왼쪽에 출력은 오른쪽에 놓입니다.
<Space를 눌러 계속>

9.
노드는 모든 입력이 들어와야 일을 수행하고 출력을 내보냅니다.
<Space를 눌러 계속>

10.
노드에 커서를 갖다대고 있으면 해당 노드가 어떤 입력을 받고 어떤 일을 하며 어떤 출력을 내보내는지 나옵니다.
<아무노드나 설명을 띄워 계속>

11.
노드의 출력결과는 다른 노드의 입력으로 보낼 수 있습니다. 단 값의 형식이 같아야 가능합니다.
형식은 색깔로 구분이 가능합니다.
<Space를 눌러 계속>

12.
어떤 데이터든 값을 보내려면 연결선이 필요합니다.
<Space를 눌러 계속>

## 이부분은 도움말로 작성될 예정
	5-1 함수노드 : 특정한 기능을 수행합니다.
	5-1 (이벤트 노드 클릭) : 이벤트 노드는 특정한 경우에 실행 신호를 내보내는 노드입니다		
	5-2 (함수 노드 클릭) : 함수 노드는 특정한 기능을 수행하고, 부가적으로 출력을 내보낼 수 있다.
	5-3 (연산자 노드 클릭) : 연산자 노드는 입력값이 다 들어오면 특정연산을 통해 새로운 결과값을 내보냅니다.
	5-4 (상수 노드 클릭) : 상수 노드는 값이 변하지 않고 항상 일정한 수를 가진 노드입니다.
	5-5 (상수 노드 설명 이후) :그외에도 값이 변하는 변수노드, 실행 신호를 제어할 수 있는 제어노드등이있습니다
	노드에 관한 자세한 설명을 보려면 언제든지 상단의 ?을 클릭하세요.

13. 
이제 움직이게하는 시스템을 만들어 봅시다.
SetAvoiderVelocity 노드는 함수노드이며 Avoider의 속도값을 변경시키는 일을 합니다.
이런 함수노드는 모두 흰색의 입력과 출력을 반드시 가집니다. 이것은 실행신호로 최종적으로 실행신호가 들어와야 함수가 기능을 하고 출력을 내보냅니다.
<Space를 눌러 계속>

14.
이 함수노드는 실행신호 외에 하나의 입력만 받고있는 것을 알 수 있습니다. 이 <color=#E7B623FF>입력</color>은 Vector2값입니다.
Vector2는 실수 2개로 이루어진 값입니다. 속도값은 x축,y축으로 2개가 필요하기때문에 이 값형식을 요구하는거죠.
<Space를 눌러 계속>

15. 
바로 옆에 존재하는 노드는 상수노드입니다. 이 노드는 특별한 일을 하지않고 항상 일정한 데이터를 출력하기만 합니다.
이 노드를 SetAvoiderVelocity함수노드의 입력에 연결해봅시다. 연결선은 회색에서 검은색방향으로 데이터를 이동시킵니다.
<상수노드와 함수노드를 연결하여 계속>

16.
좌측하단의 눈모양UI를 누르면 연결선과 노드에 어떤 값이 존재하고있는지 볼 수 있습니다.
(이 작업은 왼쪽Alt로도 전환할 수 있습니다.)
<연결선이 값을 전달하고 있음을 확인하여 계속>

17.
아직 SetAvoiderVelocity노드에 실행신호가 전달되지 않고 있습니다.
실행신호는 <color=red>이벤트노드</color>에서 발생합니다.
TickEvent노드는 매 프레임 실행신호를 출력합니다. 이 신호도 연결선으로 함수노드에 연결해보세요.
<실행신호를 함수노드에 전달하여 계속>
(코드가 완성되면 바로 게임뷰로 이동하여 클리어 하는 장면을 보여준다)

18. 
첫번째 튜토리얼를 성공했습니다. 이제 다음 단계로 넘어가죠.
<스테이지를 클리어해 계속>

19. 
맵을 보아하니 이제 상하좌우로 마음대로 움직일 수 있어야 할 것같군요.
<Space를 눌러 계속>

20.
우선 탭을 눌러 노드화면으로 이동해보세요.
<노드화면으로 이동해 계속>

21.
이 노드는 연산자노드입니다. 연산자노드는 함수노드와 비슷하지만 실행신호를 받지않아도 실행되며 단순한 연산만 합니다.
새로운 노드들에 대해 설명을 읽고 플레이어의 입력을 받는대로 움직이게 프로그래밍해보세요.
<Space를 눌러 계속>

22.
<스테이지를 클리어해보세요>

23.
훌륭합니다. 
마지막으로 노드들을 작업하다가 다시 원상태로 되돌리고 싶을 때는 우측상단의 되돌리기아이콘을 클릭하면 됩니다.
<노드들을 리셋하여 계속>

24.
당신도 이제 프로그래머입니다. 
실제 게임을 조작할 준비를 마치셨습니다.
앞으로 실제 게임에서는 새로운 노드종류가 등장할것입니다.
잘 해결해보시길 바랍니다.
<우측상단의 홈아이콘을 눌러 메인메뉴로 이동하십시오.>
